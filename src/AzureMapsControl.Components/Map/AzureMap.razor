@namespace AzureMapsControl.Components.Map

@using AzureMapsControl.Components.Atlas
@using AzureMapsControl.Components.Configuration
@using AzureMapsControl.Components.Logger
@using AzureMapsControl.Components.Runtime

@using Microsoft.JSInterop
@using Microsoft.Extensions.Options

@inject IOptions<AzureMapsConfiguration> Configuration
@inject IMapAdderService MapService
@inject IMapJsRuntime JSRuntime
@inject Microsoft.Extensions.Logging.ILogger<AzureMap> Logger

<div id="@Id" class="@Class"></div>

@code {

    #region Fields

    private MapEventInvokeHelper _mapEventInvokeHelper;

    private string _id;

    #endregion

    #region Parameters

    /// <summary>
    /// The options for setting the map control's camera.
    /// </summary>
    [Parameter]
    public CameraOptions CameraOptions { get; set; } = new CameraOptions();

    /// <summary>
    /// Options for the map's style.
    /// </summary>
    [Parameter]
    public StyleOptions StyleOptions { get; set; } = new StyleOptions();

    /// <summary>
    /// Options for enabling/disabling user interaction with the map.
    /// </summary>
    [Parameter]
    public UserInteractionOptions UserInteractionOptions { get; set; } = new UserInteractionOptions();

    /// <summary>
    /// Global properties used in all atlas service requests.
    /// </summary>
    [Parameter]
    public ServiceOptions ServiceOptions { get; set; } = new ServiceOptions();

    /// <summary>
    /// Id affected to the div hosting the map
    /// </summary>
    [Parameter]
    public string Id
    {
        get => _id;
        set { if (string.IsNullOrWhiteSpace(value)) { throw new ArgumentException("ID on the map is mandatory"); } _id = value; }
    }

    /// <summary>
    /// The class of the map component to allow styling
    /// </summary>
    [Parameter]
    public string Class { get; set; } = string.Empty;

    /// <summary>
    /// Defines the events which needs to be activated
    /// </summary>
    [Parameter]
    public MapEventActivationFlags EventActivationFlags { get; set; }

    /// <summary>
    /// Defines the controls to add to the map when it is ready
    /// </summary>
    [Parameter]
    public IReadOnlyCollection<AzureMapsControl.Components.Controls.Control> Controls { get; set; }

    /// <summary>
    /// HtmlMarkers to add to the map when it is ready
    /// </summary>
    [Parameter]
    public IReadOnlyCollection<AzureMapsControl.Components.Markers.HtmlMarker> HtmlMarkers { get; set; }

    /// <summary>
    /// Options to display traffic on the map
    /// </summary>
    [Parameter]
    public AzureMapsControl.Components.Traffic.TrafficOptions TrafficOptions { get; set; }

    /// <summary>
    /// Options to display a drawing toolbar on the map
    /// </summary>
    [Parameter]
    public AzureMapsControl.Components.Drawing.DrawingToolbarOptions DrawingToolbarOptions { get; set; }

    /// <summary>
    /// Fired when a "box zoom" interaction ends.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnBoxZoomEnd { get; set; }

    /// <summary>
    /// Fired when a "box zoom" interaction starts.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnBoxZoomStart { get; set; }

    /// <summary>
    /// Fired when a pointing device is pressed and released at the same point on the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnClick { get; set; }

    /// <summary>
    /// Fired when the right button of the mouse is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnContextMenu { get; set; }

    /// <summary>
    /// Fired when any map data loads or changes.
    /// </summary>
    [Parameter]
    public EventCallback<MapDataEventArgs> OnData { get; set; }

    /// <summary>
    /// Fired when a pointing device is clicked twice at the same point on the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnDblClick { get; set; }

    /// <summary>
    /// Fired repeatedly during a "drag to pan" interaction on the map, popup, or HTML marker.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnDrag { get; set; }

    /// <summary>
    /// Fired when a "drag to pan" interaction ends on the map, popup, or HTML marker.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnDragEnd { get; set; }

    /// <summary>
    /// Fired when a "drag to pan" interaction starts on the map, popup, or HTML marker.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnDragStart { get; set; }

    /// <summary>
    /// Fired when an error occurs.
    /// </summary>
    [Parameter]
    public EventCallback<MapErrorEventArgs> OnError { get; set; }

    /// <summary>
    /// Fired after the last frame rendered before the map enters an "idle" state:
    /// No camera transitions are in progress.
    /// All currently requested tiles have loaded.
    /// All fade/transition animations have completed.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnIdle { get; set; }

    /// <summary>
    /// Fired after a layer has been added to the map
    /// </summary>
    [Parameter]
    public EventCallback<MapLayerEventArgs> OnLayerAdded { get; set; }

    /// <summary>
    /// Fired after a layer has been removed from the map
    /// </summary>
    [Parameter]
    public EventCallback<MapLayerEventArgs> OnLayerRemoved { get; set; }

    /// <summary>
    /// Fired immediately after all necessary resources have been downloaded and the first visually complete rendering of the map has occurred.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnLoad { get; set; }

    /// <summary>
    /// Fired when a pointing device is pressed within the map or when on top of an element.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnMouseDown { get; set; }

    /// <summary>
    /// Fired when a pointing device is moved within the map or an element.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnMouseMove { get; set; }

    /// <summary>
    /// Fired when a point device leaves the map's canvas our leaves an element.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnMouseOut { get; set; }

    /// <summary>
    /// Fired when a pointing device is moved over the map or an element.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnMouseOver { get; set; }

    /// <summary>
    /// Fired when a pointing device is released within the map or when on top of an element.
    /// </summary>
    [Parameter]
    public EventCallback<MapMouseEventArgs> OnMouseUp { get; set; }

    /// <summary>
    /// Fired repeatedly during an animated transition from one view to another, as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnMove { get; set; }

    /// <summary>
    /// Fired just after the map completes a transition from one view to another, as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnMoveEnd { get; set; }

    /// <summary>
    /// Fired just before the map begins a transition from one view to another, as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnMoveStart { get; set; }

    /// <summary>
    /// Fired whenever the map's pitch (tilt) changes as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnPitch { get; set; }

    /// <summary>
    /// Fired immediately after the map's pitch (tilt) finishes changing as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnPitchEnd { get; set; }

    /// <summary>
    /// Fired whenever the map's pitch (tilt) begins a change as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnPitchStart { get; set; }

    /// <summary>
    /// Fired when the minimum required map resources are loaded before the map is ready to be programmatically interacted with.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnReady { get; set; }

    /// <summary>
    /// Fired whenever the map is drawn to the screen, as the result of:
    /// A change to the map's position, zoom, pitch, or bearing.
    /// A change to the map's style.
    /// A change to a DataSource source.
    /// The loading of a vector tile, GeoJSON file, glyph, or sprite.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnRender { get; set; }

    /// <summary>
    /// Fired immediately after the map has been resized.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnResize { get; set; }

    /// <summary>
    /// Fired repeatedly during a "drag to rotate" interaction.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnRotate { get; set; }

    /// <summary>
    /// Fired when a "drag to rotate" interaction ends.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnRotateEnd { get; set; }

    /// <summary>
    /// Fired when a "drag to rotate" interaction starts.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnRotateStart { get; set; }

    /// <summary>
    /// Fired when a DataSource or VectorTileSource is added to the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapSourceEventArgs> OnSourceAdded { get; set; }

    /// <summary>
    /// Fired when one of the map's sources loads or changes, including if a tile belonging to a source loads or changes.
    /// </summary>
    [Parameter]
    public EventCallback<MapDataEventArgs> OnSourceData { get; set; }

    /// <summary>
    /// Fired when a DataSource or VectorTileSource is removed from the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapSourceEventArgs> OnSourceRemoved { get; set; }

    /// <summary>
    /// Fired when the map's style loads or changes.
    /// </summary>
    [Parameter]
    public EventCallback<MapStyleDataEventArgs> OnStyleData { get; set; }

    /// <summary>
    /// Fired when a layer tries to load an image from the image sprite that doesn't exist
    /// </summary>
    [Parameter]
    public EventCallback<MapMessageEventArgs> OnStyleImageMissing { get; set; }

    /// <summary>
    /// Fired when an AAD access token is obtained.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnTokenAcquired { get; set; }

    /// <summary>
    /// Fired when a touchcancel event occurs within the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapTouchEventArgs> OnTouchCancel { get; set; }

    /// <summary>
    /// Fired when a touchend event occurs within the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapTouchEventArgs> OnTouchEnd { get; set; }

    /// <summary>
    /// Fired when a touchmove event occurs within the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapTouchEventArgs> OnTouchMove { get; set; }

    /// <summary>
    /// Fired when a touchstart event occurs within the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapTouchEventArgs> OnTouchStart { get; set; }

    /// <summary>
    /// Fired when a mouse wheel event occurs within the map.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnWheel { get; set; }

    /// <summary>
    /// Fired repeatedly during an animated transition from one zoom level to another, as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnZoom { get; set; }

    /// <summary>
    /// Fired just after the map completes a transition from one zoom level to another, as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnZoomEnd { get; set; }

    /// <summary>
    /// Fired just before the map begins a transition from one zoom level to another, as the result of either user interaction or methods.
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnZoomStart { get; set; }

    /// <summary>
    /// Fired when the drawing mode has changed on the drawing toolbar
    /// </summary>
    [Parameter]
    public EventCallback<AzureMapsControl.Components.Drawing.DrawingToolbarModeEventArgs> OnDrawingModeChanged { get; set; }

    /// <summary>
    /// Fired when a drawing has started
    /// </summary>
    [Parameter]
    public EventCallback<MapEventArgs> OnDrawingStarted { get; set; }

    /// <summary>
    /// Fired repeatedly when a drawing is changing
    /// </summary>
    [Parameter]
    public EventCallback<AzureMapsControl.Components.Drawing.DrawingToolbarEventArgs> OnDrawingChanging { get; set; }

    /// <summary>
    /// Fired when a drawing has changed
    /// </summary>
    [Parameter]
    public EventCallback<AzureMapsControl.Components.Drawing.DrawingToolbarEventArgs> OnDrawingChanged { get; set; }

    /// <summary>
    /// Fires when a drawing is completed
    /// </summary>
    [Parameter]
    public EventCallback<AzureMapsControl.Components.Drawing.DrawingToolbarEventArgs> OnDrawingComplete { get; set; }

    #endregion

    #region Razor events

    protected override void OnInitialized()
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_OnInitialized, "AzureMap - OnInitialized");
        _mapEventInvokeHelper = new MapEventInvokeHelper(MapEventReceivedAsync);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_OnInitialized, "AzureMap - OnAfterRenderAsync", firstRender);
        if (firstRender)
        {
            var enabledEvents = (EventActivationFlags ?? MapEventActivationFlags.None().Enable(MapEventType.Ready)).EnabledEvents;
            Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_OnInitialized, $"Adding map");
            Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_OnInitialized, $"Id: {Id}");
            Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_OnInitialized, $"AuthType: {Configuration.Value.AuthType}");
            Logger?.LogAzureMapsControlTrace(AzureMapLogEvent.AzureMap_OnInitialized, $"AadAppId: {Configuration.Value.AadAppId} | AadTenant: {Configuration.Value.AadTenant} | ClientId: {Configuration.Value.ClientId} | SubscriptionKey: {Configuration.Value.SubscriptionKey}");
            Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_OnInitialized, $"Events: {string.Join('|', enabledEvents)}");
            await JSRuntime.InvokeVoidAsync(Constants.JsConstants.Methods.Core.AddMap.ToCoreNamespace(),
                Id,
                Configuration.Value,
                ServiceOptions,
                enabledEvents,
                DotNetObjectReference.Create(_mapEventInvokeHelper));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    #region Drawing Toolbar

    private async ValueTask DrawingToolbarEventReceivedAsync(AzureMapsControl.Components.Drawing.DrawingToolbarJsEventArgs drawingToolbarEvent)
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DrawingToolbarEvent, "Received drawing toolbar event");
        Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_DrawingToolbarEvent, $"Type: {drawingToolbarEvent.Type}");
        MapService.Map.DispatchDrawingToolbarEvent(drawingToolbarEvent);
        switch (drawingToolbarEvent.Type)
        {
            case "drawingchanged":
                Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DrawingToolbarEvent, "Emitting OnDrawingChanged");
                await OnDrawingChanged.InvokeAsync(new Drawing.DrawingToolbarEventArgs(MapService.Map, drawingToolbarEvent));
                break;

            case "drawingchanging":
                Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DrawingToolbarEvent, "Emitting OnDrawingChanging");
                await OnDrawingChanging.InvokeAsync(new Drawing.DrawingToolbarEventArgs(MapService.Map, drawingToolbarEvent));
                break;

            case "drawingcomplete":
                Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DrawingToolbarEvent, "Emitting OnDrawingComplete");
                await OnDrawingComplete.InvokeAsync(new Drawing.DrawingToolbarEventArgs(MapService.Map, drawingToolbarEvent));
                break;

            case "drawingmodechanged":
                Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DrawingToolbarEvent, "Emitting OnDrawingModeChanged");
                await OnDrawingModeChanged.InvokeAsync(new Drawing.DrawingToolbarModeEventArgs(MapService.Map, drawingToolbarEvent));
                break;

            case "drawingstarted":
                Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DrawingToolbarEvent, "Emitting OnDrawingStarted");
                await OnDrawingStarted.InvokeAsync(new MapEventArgs(MapService.Map, drawingToolbarEvent.Type));
                break;
        }
    }

    #endregion

    #region HTML Markers

    private async ValueTask HtmlMarkerEventReceivedAsync(AzureMapsControl.Components.Markers.HtmlMarkerJsEventArgs htmlMarkerEvent)
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_HtmlMarkerEventReceivedAsync, "Received html marker event");
        Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_HtmlMarkerEventReceivedAsync, $"Id: {htmlMarkerEvent.MarkerId} | Type: {htmlMarkerEvent.Type}");
        if (MapService.Map.HtmlMarkers != null)
        {
            var htmlMarker = MapService.Map.HtmlMarkers.First(marker => marker.Id == htmlMarkerEvent.MarkerId);
            if (htmlMarker != null)
            {
                await Task.Run(() =>
                {
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_HtmlMarkerEventReceivedAsync, "Dispatching html marker event");
                    Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_HtmlMarkerEventReceivedAsync, $"Id: {htmlMarkerEvent.MarkerId} | Type: {htmlMarkerEvent.Type}");
                    htmlMarker.DispatchEvent(MapService.Map, htmlMarkerEvent);
                });
            }
        }
    }

    #endregion

    #region Layers

    private async ValueTask LayerEventReceivedAsync(MapJsEventArgs eventArgs)
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_LayerEventReceivedAsync, "Layer event received");
        var layer = MapService.Map.Layers.FirstOrDefault(l => l.Id == eventArgs.LayerId);
        if (layer != null)
        {
            await Task.Run(() =>
            {
                Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_LayerEventReceivedAsync, "Dispatching layer event");
                Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_LayerEventReceivedAsync, $"Id: {layer.Id} | Type: {eventArgs.Type}");
                layer.DispatchEvent(MapService.Map, eventArgs);
            });
        }
    }

    #endregion

    #region Map

    private async ValueTask MapEventReceivedAsync(MapJsEventArgs mapEvent)
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Received map event");
        Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, $"Type: {mapEvent.Type}");
        if (mapEvent.Type == "ready")
        {
            Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Setting map options");
            await JSRuntime.InvokeVoidAsync(Constants.JsConstants.Methods.Core.SetOptions.ToCoreNamespace(),
                CameraOptions,
                StyleOptions,
                UserInteractionOptions,
                TrafficOptions);

            await MapService.AddMapAsync(new Map(Id, 
                JSRuntime, 
                Logger, 
                new Drawing.DrawingToolbarEventInvokeHelper(DrawingToolbarEventReceivedAsync), 
                new Markers.HtmlMarkerInvokeHelper(HtmlMarkerEventReceivedAsync), 
                new Layers.LayerEventInvokeHelper(LayerEventReceivedAsync), 
                new Popups.PopupInvokeHelper(PopupEventReceivedAsync),
                new Data.DataSourceEventInvokeHelper(DataSourceEventReceivedAsync))
            {
                HtmlMarkers = HtmlMarkers,
                DrawingToolbarOptions = DrawingToolbarOptions,
                CameraOptions = CameraOptions,
                StyleOptions = StyleOptions,
                UserInteractionOptions = UserInteractionOptions,
                TrafficOptions = TrafficOptions
            });

            await MapService.Map.AddControlsAsync(Controls);
            await MapService.Map.AddHtmlMarkersAsync(HtmlMarkers);
            await MapService.Map.AddDrawingToolbarAsync(DrawingToolbarOptions);
        }
        await DispatchMapEventAsync(mapEvent);
    }

    private async ValueTask DispatchMapEventAsync(MapJsEventArgs mapEvent)
    {
        if (EventActivationFlags != null
        && EventActivationFlags.EnabledEvents != null
        && EventActivationFlags.EnabledEvents.Contains(mapEvent.Type)
        && MapService.Map is not null)
        {
            MapService.Map.DispatchEvent(mapEvent);
            switch (mapEvent.Type)
            {
                case "boxzoomend":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnBoxZoomEnd");
                    await OnBoxZoomEnd.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "boxzoomstart":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnBoxZoomStart");
                    await OnBoxZoomStart.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "click":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnClick");
                    await OnClick.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "contextmenu":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnContextMenu");
                    await OnContextMenu.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "data":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnData");
                    await OnData.InvokeAsync(new MapDataEventArgs(MapService.Map, mapEvent));
                    break;
                case "dblclick":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnDblClick");
                    await OnDblClick.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "drag":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnDrag");
                    await OnDrag.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "dragend":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnDragEnd");
                    await OnDragEnd.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "dragstart":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnDragStart");
                    await OnDragStart.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "error":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnError");
                    await OnError.InvokeAsync(new MapErrorEventArgs(MapService.Map, mapEvent));
                    break;
                case "idle":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnIdle");
                    await OnIdle.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "layeradded":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnLayerAdded");
                    await OnLayerAdded.InvokeAsync(new MapLayerEventArgs(MapService.Map, mapEvent));
                    break;
                case "layerremoved":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnLayerRemoved");
                    await OnLayerRemoved.InvokeAsync(new MapLayerEventArgs(MapService.Map, mapEvent));
                    break;
                case "load":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnLoad");
                    await OnLoad.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "mousedown":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMouseDown");
                    await OnMouseDown.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "mousemove":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMouseMove");
                    await OnMouseMove.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "mouseout":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMouseOut");
                    await OnMouseOut.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "mouseover":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMouseOver");
                    await OnMouseOver.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "mouseup":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMouseUp");
                    await OnMouseUp.InvokeAsync(new MapMouseEventArgs(MapService.Map, mapEvent));
                    break;
                case "move":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMove");
                    await OnMove.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "moveend":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMoveEnd");
                    await OnMoveEnd.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "movestart":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnMoveStart");
                    await OnMoveStart.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "pitch":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnPitch");
                    await OnPitch.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "pitchend":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnPitchEnd");
                    await OnPitchEnd.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "pitchstart":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnPitchStart");
                    await OnPitchStart.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "ready":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnReady");
                    await OnReady.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "render":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnRender");
                    await OnRender.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "resize":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnResize");
                    await OnResize.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "rotate":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnRotate");
                    await OnRotate.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "rotateend":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnRotateEnd");
                    await OnRotateEnd.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "rotatestart":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnRotateStart");
                    await OnRotateStart.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "sourceadded":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnSourceAdded");
                    await OnSourceAdded.InvokeAsync(new MapSourceEventArgs(MapService.Map, mapEvent));
                    break;
                case "sourcedata":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnSourceData");
                    await OnSourceData.InvokeAsync(new MapDataEventArgs(MapService.Map, mapEvent));
                    break;
                case "sourceremoved":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnSourceRemoved");
                    await OnSourceRemoved.InvokeAsync(new MapSourceEventArgs(MapService.Map, mapEvent));
                    break;
                case "styledata":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnStyleData");
                    await OnStyleData.InvokeAsync(new MapStyleDataEventArgs(MapService.Map, mapEvent));
                    break;
                case "styleimagemissing":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnStyleImageMissing");
                    await OnStyleImageMissing.InvokeAsync(new MapMessageEventArgs(MapService.Map, mapEvent));
                    break;
                case "tokenacquired":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnTokenAcquired");
                    await OnTokenAcquired.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "touchcancel":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnTouchCancel");
                    await OnTouchCancel.InvokeAsync(new MapTouchEventArgs(MapService.Map, mapEvent));
                    break;
                case "touchend":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnTouchEnd");
                    await OnTouchEnd.InvokeAsync(new MapTouchEventArgs(MapService.Map, mapEvent));
                    break;
                case "touchmove":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnTouchMove");
                    await OnTouchMove.InvokeAsync(new MapTouchEventArgs(MapService.Map, mapEvent));
                    break;
                case "touchstart":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnTouchStart");
                    await OnTouchStart.InvokeAsync(new MapTouchEventArgs(MapService.Map, mapEvent));
                    break;
                case "wheel":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnWheel");
                    await OnWheel.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "zoom":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnZoom");
                    await OnZoom.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "zoomend":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnZoomEnd");
                    await OnZoomEnd.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
                case "zoomstart":
                    Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_MapEventReceivedAsync, "Emitting OnZoomStart");
                    await OnZoomStart.InvokeAsync(new MapEventArgs(MapService.Map, mapEvent.Type));
                    break;
            }
        }
    }

    #endregion

    #region Popups

    private async ValueTask PopupEventReceivedAsync(AzureMapsControl.Components.Popups.PopupEventArgs eventArgs)
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_PopupEventReceivedAsync, "Received popup event");
        Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_PopupEventReceivedAsync, $"Id: {eventArgs.Id} | Type: {eventArgs.Type}");
        await Task.Run(
        () =>
        {
            Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_PopupEventReceivedAsync, "Dispatching popup event");
            Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_PopupEventReceivedAsync, $"Id: {eventArgs.Id} | Type: {eventArgs.Type}");
            MapService.Map.Popups.First(popup => popup.Id == eventArgs.Id).DispatchEvent(eventArgs);
        });
    }

    #endregion

    #region Data Sources

    private async ValueTask DataSourceEventReceivedAsync(AzureMapsControl.Components.Data.DataSourceEventArgs eventArgs)
    {
        Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DataSourceEventReceivedAsync, "AzureMap - DataSourceEventReceived");
        Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_DataSourceEventReceivedAsync, $"Id: {eventArgs.Id} | Type: {eventArgs.Type}");
        await Task.Run(
        () =>
        {
            Logger?.LogAzureMapsControlInfo(AzureMapLogEvent.AzureMap_DataSourceEventReceivedAsync, "Dispatching datasource event");
            Logger?.LogAzureMapsControlDebug(AzureMapLogEvent.AzureMap_DataSourceEventReceivedAsync, $"Id: {eventArgs.Id} | Type: {eventArgs.Type}");
            MapService.Map.Sources.OfType<Components.Data.DataSource>().First(dataSource => dataSource.Id == dataSource.Id).DispatchEvent(eventArgs);
        });
    }

    #endregion
}
