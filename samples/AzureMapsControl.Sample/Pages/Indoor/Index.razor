@page "/Indoor"

@using AzureMapsControl.Components.Map
@using Microsoft.Extensions.Configuration

@inject AzureMapsControl.Components.Indoor.IIndoorService IndoorService
@inject IConfiguration Configuration

<AzureMap Id="map"
          CameraOptions="new CameraOptions { Center= new AzureMapsControl.Components.Atlas.Position(-122.13214, 47.63647), Zoom = 19 }"
          StyleOptions="new StyleOptions { Style = MapStyle.Blank }"
          EventActivationFlags="AzureMapsControl.Components.Map.MapEventActivationFlags.None().Enable(AzureMapsControl.Components.Map.MapEventType.Ready, AzureMapsControl.Components.Map.MapEventType.Click)"
          OnReady="OnMapReadyAsync" />

@code {

    public async Task OnMapReadyAsync(MapEventArgs eventArgs)
    {
        var levelControl = new AzureMapsControl.Components.Indoor.LevelControl(new AzureMapsControl.Components.Indoor.LevelControlOptions
        {
            Position = AzureMapsControl.Components.Controls.ControlPosition.TopRight
        });

        var statesetId = Configuration["Indoor:StatesetId"];

        var options = new AzureMapsControl.Components.Indoor.IndoorManagerOptions
        {
            Geography = Configuration["AzureMaps:Geography"],
            LevelControl = levelControl,
            StatesetId = statesetId,
            TilesetId = Configuration["Indoor:TilesetId"]
        };

        var indoorManager = await IndoorService.CreateIndoorManagerAsync(options, Components.Indoor.IndoorManagerEventActivationFlags.All());

        indoorManager.OnFacilityChanged += eventArgs =>
        {
            Console.WriteLine("OnFacilityChanged");
            Console.WriteLine($"Switched facility from {eventArgs.PrevFacilityId} to {eventArgs.FacilityId}");
            Console.WriteLine($"Switched level from {eventArgs.PrevLevelNumber} to {eventArgs.LevelNumber}");
        };

        indoorManager.OnLevelChanged += eventArgs =>
        {
            Console.WriteLine("OnLevelChanged");
            Console.WriteLine($"Switched facility from {eventArgs.PrevFacilityId} to {eventArgs.FacilityId}");
            Console.WriteLine($"Switched level from {eventArgs.PrevLevelNumber} to {eventArgs.LevelNumber}");
        };

        if (!string.IsNullOrWhiteSpace(statesetId))
        {
            await indoorManager.SetDynamicStylingAsync(true);
        }
    }

}